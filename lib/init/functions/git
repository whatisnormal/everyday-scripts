#!/usr/bin/env bash


#
# Bootstraps a GIT project from a remote location.
# @params:
#   1=remote_url
#
function cvsbootstrap () {
    remote_url=${1}
    # Check if 'remote_url' argument is non-existent.
    if [[ -z ${remote_url} ]]; then
        echo "Remote URL arg was not found. Expected format:  git@{git-host-name}/{groupName}/{repoName}.git"
        exit 1
    fi

    # Initializes local repo in current directory.
    git init .

    # Adds a remote named 'origin' to the repo 'remote_urlq'
    git remote add origin ${remote_url}

    # Verifies remote is set
    git remote -v

    # Fetches references already created in the remote repo
    git fetch

    # Sets upstream to master branch located at the remote repo 'origin', defined previously.
    git branch -u origin/master
}

#
# Checks out git repo from remote location,
# @params:
#   1=remote_branch_name
#
function checkout-remote () {
    remote_branch_name=${1}

    # Checks out a remote project to the local repo and sets upstream,q
    if [[ -z ${remote_branch_name} ]]; then
        echo "Remote branch name arg was not found. Exiting..."
        exit 1
    fi
    echo "Checking out branch: $remote_branch_name"
    git checkout --track origin ${remote_branch_name}

}

#
# Sets 'git alias' depending on the argument, replacing any existing value.
#
function setAlias() {
    prefix="git config --global --replace-all alias."
    eval "${prefix}${1} \"${2}\""
    echo "****** Validate alias set for '${1}' ***** "
    eval "git config --global --get alias.${1}"
}

# Push force ()
setAlias "gpfl" "push --force-with-lease"

# Pulls remote repo but rebases local commits against remote commits.
setAlias "gpr" "pull --rebase"

# Adds to stage modified or deleted file, changes previous commit message and commits.
setAlias "gca" "commit -a --amend"

# Shows local branches.
setAlias "gb" "branch"

# Shows remote branches.
setAlias "gbr" "branch -r"

# Shows git status.
setAlias "gs" "status"

# Shows a short description of git status with the branch and tracking info
setAlias "gss" "status -bs"

# Shows a colored diff, assuming '=always'
setAlias "gd" "diff --color"

# Shows the abbreviated commit logs in graph format
setAlias "gg" "log --oneline --abbrev-commit --all --graph --decorate --color"

# Shows a short git log.
setAlias "glog" "log --oneline"

setAlias "glogd" "log --name-only --oneline"

setAlias "glastci" "diff-tree --no-commit-id --name-only -r HEAD"
